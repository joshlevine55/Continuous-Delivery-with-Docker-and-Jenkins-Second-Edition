pipeline {
    agent {
        docker {
            image 'dlambrig/gradle-agent-intel:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
            alwaysPull true
            customWorkspace '/home/jenkins/.gradle/workspace'
        }
    }
    
    environment {
        REGISTRY = "https://<registry-address>:5001" // Replace with actual registry address
        REGISTRY_HOST = "<registry-address>:5001" // Replace with actual registry address
        PROJECT_DIR = "Chapter08/sample1"
        IMAGE_NAME = "calculator"
        IMAGE_TAG = "${BUILD_NUMBER}" // Example tag
    }

    stages {
        stage('Checkout code and prepare environment') {
            steps {
                git url: 'https://github.com/dlambrig/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git', branch: 'master'
                
                sh """
                    set -e
                    cd ${PROJECT_DIR}
                    chmod +x gradlew
                """
            }
        }

    stages {
        stage('Build') {
            steps {
                sh """
                  cd Chapter08/sample1
                  chmod +x gradlew
                  ./gradlew build
                """
            }
        }

        stage('Run in Master Branch') {
            when {
                branch "master"
            }
            steps {
                sh """
                   cd Chapter08/sample1
                   ./gradlew jacocoTestCoverageVerification
                """
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', 
                                                     usernameVariable: 'DOCKER_USER', 
                                                     passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            set -e
                            cd ${PROJECT_DIR}
                            echo "\$DOCKER_PASS" | docker login \$REGISTRY -u \$DOCKER_USER --password-stdin
                            docker build -t ${IMAGE_NAME} .
                            docker tag ${IMAGE_NAME} ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Run in Playground') {
            when {
                branch "playground"
            }
            steps {
                sh """
                   cd Chapter08/sample1
                   ./gradlew test
                   ./gradlew jacocoTestReport
                """   
            }
        }

        stage('Run in Feature Branches') {
            when {
                expression { 
                env.BRANCH_NAME.contains("Feature") 
            } 

            }
            steps {
                sh """
                   cd Chapter08/sample1
                   ./gradlew test
                   ./gradlew jacocoTestReport
                """
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-registry', 
                                                     usernameVariable: 'DOCKER_USER', 
                                                     passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            set -e
                            cd ${PROJECT_DIR}
                            echo "\$DOCKER_PASS" | docker login \$REGISTRY -u \$DOCKER_USER --password-stdin
                            docker build -t ${IMAGE_NAME} .
                            docker tag ${IMAGE_NAME} ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                            docker push ${REGISTRY_HOST}/${IMAGE_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }
    }
     
    post {
        failure {
            echo 'Pipeline failure'
        }
        success {
            echo 'Pipeline ran perfectly'
        }
    }
}
